/*
  We first reference the functionalities we want with @use.
  @use is to reference files with only @mixins and/or @functions - no declarative styles outside of @mixins.
*/
@use '@angular/material' as mat;
@use '/src/app/components/easy-panel/_easy-panel-theme' as easyPanel;
@use './scss/material-utils' as materialUtils;

/*
  After we put the use rules, we can proceed with the resetting CSS below
*/
* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

/*
  We need to @include mat.core() - this outputs the base CSS for all components - those that come with
  Angular material, and those we make that participate in Angular Material.
*/
@include mat.core();

/*
  Now, here come the color definitions. A Material palette is a collection of tints and shades of a single hue plus the contrast collection.
  The contrast collection is a series of foreground colors for each corresponding tint. Each tint/shade vs. contrast pair is a background-foreground
  pair.

  So, we create a palette of our own. We're going to use the palette generator tool at http://mcg.mbitson.com. (Note it's not https, but that's OK -
  we don't submit any sensitive information to that website). We click on the clipboard icon which pops up a modal containing some code. Since we're
  working in Angular Material, we'll choose the Angular Js 2 (Material 2) option, which is the newer version (than plain Angular Js (Material)).

  We name it $my-preliminary-palette - preliminary because it defines ONLY the tones and contrasts we want. Later, we pass our preliminary template
  through a mat function - which will tack on more key-value color pairs for things like shadows, etc.
*/

$my-preliminary-primary-palette: (
  50 : #e8eaf6,
  100 : #c5cbe9,
  200 : #9fa8da,
  300 : #7985cb,
  400 : #5c6bc0,
  500 : #3f51b5,
  600 : #394aae,
  700 : #3140a5,
  800 : #29379d,
  900 : #1b278d,
  A100 : #c6cbff,
  A200 : #939dff,
  A400 : #606eff,
  A700 : #4757ff,
  contrast: (
      50 : #000000,
      100 : #000000,
      200 : #000000,
      300 : #000000,
      400 : #ffffff,
      500 : #ffffff,
      600 : #ffffff,
      700 : #ffffff,
      800 : #ffffff,
      900 : #ffffff,
      A100 : #000000,
      A200 : #000000,
      A400 : #ffffff,
      A700 : #ffffff,
  )
);

/*
  We already got our tints and contrasts in our preliminary palette. Now, we call mat.define-palette and pass our preliminary palette. The function will
  generate a palette which contains the tints and contrasts we defined plus a few other key-value color pairs. This is absolutely necessary. We cannot
  just pass in our palette definition. We have to use the one generated by mat.define-palette.
*/
$my-primary-palette:  mat.define-palette($my-preliminary-primary-palette);

/*
  We now create a theme with mat.define-light-theme. Note that we will first define the light theme because that's what we want as a default when our
  entire website loads for the first time. Note that we pass the following object with the following requirements:

  * The color object with properties primary and accent, where primary and accent are palettes generated off mat.define-palette(...).
  * The color object may also contain warning, which is optional, but requires a palette generated off mat.define-palette(...).
*/
$theme: mat.define-light-theme((
  color: (
    primary: $my-primary-palette,
    accent: mat.define-palette($my-primary-palette)
  )
));

/*
  We now generate the necessary CSS with @include mat.all-component-themes($theme). We pass it our $theme, and it will color the Angular Material
  components with what we have defined and set up so far.
*/
@include mat.all-component-themes($theme);
@include easyPanel.color($theme);

mat-form-field  .mdc-floating-label {
  // color: mat.get-color-from-palette($my-primary-palette, 100)!important;
  color: materialUtils.getColorFromTheme($theme, primary, 100)!important;
}

// ----------------- Dark zone -------------------

/*
  When we want a dark theme, we'll need to specify a .dark class and generate the CSS inside the .dark CSS class definition. In this application,
  we will create a mechanism that will toggle dark and light mode. We'll cover the details in another file in our system. For now, the trick is
  the mechanism will add the CSS class "dark" to the body tag of our entire website when our app is in dark mode, and remove the "dark" CSS class when
  our app is in light mode.

  We define a dark theme with mat.define-dark-theme. This function is similar to the mat.define-light-theme, except it defines dark background colors for
  the application background and the background colors of Material componets.

  Now, inside the "dark" class, we render our dark theme with @include mat.all-component-colors($dark-theme).

  Note that dark theme CSS will be generated and make it to compilation, but will only show in the app when our app is in dark mode.
*/

.dark {
  $dark-theme: mat.define-dark-theme((
    color: (
      primary: $my-primary-palette,
      accent: mat.define-palette($my-primary-palette)
    )
  ));

  @include mat.all-component-colors($dark-theme);
  @include easyPanel.color($dark-theme);
}
